20180408开始系统的学习Java

配置Java环境:
	https://blog.csdn.net/best3c/article/details/72848540
	
20180408:
	学习字符串:
		String 类：
			创建字符串:
				String(char a[]);
				String(char a[], int offset, int length);
				String str1, str2;
				str1 = "hello";
				str2 = "world";
			字符串的连接:
				+ 连接
			获取字符串的信息:
				长度: 
					str.length()
				字符串查找: indexOf() 和 lastIndexOf()
					str.indexOf(String s)返回str中首次出现s的位置
					str.lastIndexOf(String s) 返回最后一次出现s的位置
				获得指定索引位置的字符:
					str.charAt(int index) 返回char类型数据
				获取子字符串: substring()
					str.substring(int beginIndex) 返回从beginIndex开始到结尾的子串
					str.substring(int beginIndex, int endIndex) 返回从beginIndex开始到endIndex结尾的子串
				去除空格:
					str.trim() 去除首尾空格
				字符串替换:
					str.replace(char oldChar, char newChar)
				判断字符串的开头与结尾:
					str.startsWith(String prefix)
					str.ednsWith(String suffix)
					这两个方法返回的都是boolean值
				判断字符串是否相等:
					1. boolean b = (String str1 == String str2)
						判断字符串对象是否相等
					2. boolean b = str.equals(String otherstr)
						判断字符串内容是否相等
					3. boolean b = str.equalsIgnoreCase(String otherstr)
						判断字符串忽略大小写是否相等
				比较两个字符串的大小:
					str.compareTo(String otherstr) return -1，0， 1
				字母大小写转换:
					toLowerCase()
					toUpperCase()
				字符串分割:
					String[] result = str.split(String sign, int limit)
				格式化字符串:
					str.format(String format, Object...args)
					日期格式化
					时间格式化
					常规类型格式化
				字符串生成器:
					可变字符序列 StringBuilder 类: 
						append(content) content表示要追加到字符串生成器中的内容
						insert(int offset, arg) 表示在offset位置加入arg
						delete(int start, int end) 表示删除指定位置指定长度的字符串


	学习的数组:
		创建一维数组:
			第一种:
				int a[];
				int[] a;
				a = new int[9];
			第二种:
				int a[] = new int[9];
		初始化一维数组:
			第一种:
				int a[] = new int[]{1,2,3,4}
			第二种:
				int a[] = {1,2,3,4}
		创建二维数组:
			第一种:
				int a[][];
				int[][] a;
				a = new int[2][4];
				或者:
					a = new int[2][];
					a[0] = new int[2];
					a[1] = new int[3];
			第二种:
				int a[2][];
				int a[0] = new int[2];
				int a[1] = new int[3];
		初始化二维数组:
			int a[][] = {{1,2,3}, {4,5,6,7}};
		数组的基本操作:
			遍历数组:
				for (int i = 0; i < a.length; i++){};
				for (int i : a){};
			填充替换数组元素:
				java.util.Arrays 类中的 
				1.fill(int[] a, int value) 对a数组中的所有元素进行替换为value
				2.fill(int[] a, int fromIndex, int toIndex, int value) 
				对数组a的从fromIndex开始(包括)到toIndex结束(不包括)的所有元素替换为value
			数组排序:
				java.util.Arrays
				Arrays.sort(object)
			复制数组:
				java.util.Arrays
				1.copyOf(arr, int newlength)
				2.copyOfRange(arr, int fromIndex, int toIndex)
			数组查询:
				Arrays类的 binarySearch()方法使用二分法搜索指定数组
				1.binarySearch(Object[] a, Object key)
					返回key的索引,或者-1或者-插入点(插入点是第一个大于key的元素索引)
				2.binarySearch(Object[] a, int fromIndex, int toIndex, Object key)
					指定范围内搜索key
			数组排序算法:
				冒泡排序:
				直接选择排序:
				反转排序:

20180412:
	Java常见类:


20180414:
	面向对象编程时 1.首先考虑这个问题中有什么类，什么对象，
				 2.然后考虑这些类和对象有什么属性和方法
				 3.考虑类和类之间存在什么关系
	旅行社 预定机票 航班目录 记账 记账文件 准备机票 旅客
	类: 
		机票:
			属性:
				出发地
				目的地
				时间
				座位
			方法:
				显示航班时间
				取消
		旅客:
		旅行社:


	面向对象:从现实世界中客观存在的事物出发来构造软件系统，并在系统的构造中尽可能运用人类的自然思维方式
	类: 具有共同特征的一类事物的抽象
	对象:类的具体实例，静态属性（成员变量）和动态属性（方法）的封装体
	抽象:
	分类:
	继承:
	多态:(动态绑定，持绑定)
		在执行期间，而非编译期间判断所引用对象的实际类型，根据其实际类型调用其相应的方法
		存在条件:
			1.继承
			2.重写
			3.父类引用指向子类对象
	关系:
		关联关系:A类方法里面的参数有B类实例
		继承关系:C++存在多重继承，（多重继承存在的问题是父类属性可能存在同名）Java不存在多重继承，
		聚合关系:
			聚集:
				关系不紧密
			组合:
				关系紧密不可分
		实现关系:不同子类对父类的方法实现方式不同

	内存:
		code seg 就是代码区，存储代码
		date seg 存储静态的成员变量和字符串常亮
		heap seg 堆存储对象的引用，也就是new出来的东西
		staic seg 栈存储局部变量及方法的参数，方法参数也是局部变量

	类和对象的关系:
		A a = new A()
		a是局部变量，严格来说a是对象的引用，a放在栈内存中，a的值指向new出来的A的对象（在堆内存中）
	关键字static:
		1.在类中，用static声明的成员变量为静态成员变量，它为类的公用变量，在第一次使用时被初始化，对该类的所有对象来说，static成员只有一份。
		2.用static声明的方法为静态方法，在调用该方法时，不会将对象的引用传递给它，所以在static方法中，不可以访问非static成员。
		3.静态方法不再是对某个对象调用，所以不能访问非静态成员。
		4.可以通过对象引用或者类名（不需要实例化）访问静态成员。
	package:
		如果想将一个类放入包中，在这个类源文件第一句话写package
		必须保证该类的class文件位于正确的目录下
		该类的源码可能产生影响，删除或转移到另外的目录下

	import:













